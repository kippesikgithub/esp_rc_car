esphome:
  name: esp-remote-car
  friendly_name: esp-remote-car

#change to esp board you use
esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret_api

ota:
  password: !secret_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Remote-Car Fallback Hotspot"
    password: !secret_rccar

captive_portal:

#motor outputs
output:
  - platform: gpio
    id: motor12_forward
    pin: GPIO6 
  - platform: gpio
    id: motor12_reverse
    pin: GPIO7  
  - platform: ledc
    pin: GPIO10
    id: motor12_speed
    frequency: 1000Hz

  - platform: gpio
    id: motor34_forward
    pin: GPIO8
  - platform: gpio
    id: motor34_reverse
    pin: GPIO9
  - platform: ledc
    pin: GPIO11
    id: motor34_speed
    frequency: 1000Hz

#motor number sensors
number:
  - platform: template
    name: Motor12
    id: motor12_controll
    min_value: -100
    max_value: 100
    step: 10
    optimistic: true
    initial_value: 0
    on_value:
       then:
          - lambda: |- 
                  if (id(motor12_controll).state == 0) {
                    id(motor12_speed).set_level(0.0);
                    id(motor12_forward).turn_off();
                    id(motor12_reverse).turn_off();
                  } else {
                    if (id(motor12_controll).state < 0) {
                      id(motor12_speed).set_level((id(motor12_controll).state *-1)/100);
                      id(motor12_forward).turn_on();
                      id(motor12_reverse).turn_off();
                    } else {
                      id(motor12_speed).set_level((id(motor12_controll).state)/100);
                      id(motor12_forward).turn_off();
                      id(motor12_reverse).turn_on();
                    }
                  }
  - platform: template
    name: Motor34
    id: motor34_controll
    min_value: -100
    max_value: 100
    step: 10
    optimistic: true
    initial_value: 0
    on_value:
       then:
          - lambda: |- 
                  if (id(motor34_controll).state == 0) {
                    id(motor34_speed).set_level(0.0);
                    id(motor34_forward).turn_off();
                    id(motor34_reverse).turn_off();
                  } else {
                    if (id(motor34_controll).state < 0) {
                      id(motor34_speed).set_level((id(motor34_controll).state *-1)/100);
                      id(motor34_forward).turn_on();
                      id(motor34_reverse).turn_off();
                    } else {
                      id(motor34_speed).set_level((id(motor34_controll).state)/100);
                      id(motor34_forward).turn_off();
                      id(motor34_reverse).turn_on();
                    }
                  }

#ws2811 leds
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    method:
      type: esp32_rmt
      channel: 0
    pin: GPIO16
    num_leds: 3
    name: "Verlichting Voor"
    id: esp_rc_car_lights_front

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    method:
      type: esp32_rmt
      channel: 1
    pin: GPIO14
    num_leds: 3
    name: "Verlichting Achter"
    id: esp_rc_car_lights_rear

#ultrasonic distance sensor
sensor:
  - platform: ultrasonic
    trigger_pin: GPIO40
    echo_pin: GPIO38
    name: "Ultrasonic Voor"
    update_interval: 1s

#wifi sensor 
  - platform: wifi_signal
    name: "RC Car WiFi Signal dB"
    id: esp_rc_car_wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: copy
    source_id: esp_rc_car_wifi_signal_db
    name: "RC Car WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: "diagnostic"

#battery sensor 
  - platform: adc
    id: esp_rc_car_battery_voltage 
    pin: GPIO3
    attenuation: auto
    name: Battery Voltage
    update_interval: 1s
    accuracy_decimals: 2
    filters:
      - multiply: 4.787524366471735
    #use moving median to smooth spikes
      - median:
          window_size: 10
          send_every: 10
          send_first_at: 10
      - delta: 0.01 #Only send values to HA if they change 
      - throttle: 30s #Limit values sent to Ha
#Convert the Voltage to a battery  level (%)
  - platform: copy
    source_id: esp_rc_car_battery_voltage
    id: esp_speelhuis_battery_level
    icon: "mdi:battery"
    name: Battery Level
    unit_of_measurement: '%'
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
      # Map from voltage to Battery level
          - 9.1 -> 0
          - 12.36 -> 100
      #Handle/cap boundaries
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
      - delta: 0.5 #Only send values to HA if they change 
      - throttle: 30s #Limit values sent to Ha

button:  
  - platform: restart
    name: "Restart device"

